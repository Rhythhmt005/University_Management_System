#include <iostream>
#include <vector>
#include <map>
using namespace std;

// ========================
// Simplified Base Class
// ========================
class Person {
protected:
    string name, id, contact;
    int age;

public:
    Person(string n, int a, string i, string c) : name(n), id(i), contact(c) {
        if (n.empty() || a <= 0 || a > 120) throw invalid_argument("Invalid name or age");
    }
    virtual ~Person() {}

    virtual void displayDetails() const {
        cout << "Name: " << name << ", Age: " << age << ", ID: " << id << ", Contact: " << contact << endl;
    }

    virtual double calculatePayment() const { return 0.0; }
};

// ========================
// Simplified Student Class
// ========================
class Student : public Person {
    string enrollmentDate, program;
    double gpa;

public:
    Student(string n, int a, string i, string c, string ed, string prog, double g)
        : Person(n, a, i, c), enrollmentDate(ed), program(prog), gpa(g) {
        if (g < 0.0 || g > 4.0) throw invalid_argument("Invalid GPA");
    }

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Program: " << program << ", Enrollment: " << enrollmentDate << ", GPA: " << gpa << endl;
    }

    double calculatePayment() const override { return 5000.0; }
};

// ========================
// Simplified Professor Class
// ========================
class Professor : public Person {
    string department, specialization, hireDate;

public:
    Professor(string n, int a, string i, string c, string d, string s, string h)
        : Person(n, a, i, c), department(d), specialization(s), hireDate(h) {}

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Dept: " << department << ", Specialization: " << specialization << ", Hire Date: " << hireDate << endl;
    }

    double calculatePayment() const override { return 70000.0; }
};

// ========================
// Simplified Course Class
// ========================
class Course {
    string code, title, desc;
    int credits;

public:
    Course(string c, string t, int cr, string d) : code(c), title(t), desc(d), credits(cr) {
        if (cr <= 0) throw invalid_argument("Invalid credits");
    }

    void displayCourse() const {
        cout << "Course: " << title << " (" << code << "), Credits: " << credits << ", " << desc << endl;
    }
};

// ========================
// Simplified Department Class
// ========================
class Department {
    string name, location;
    double budget;

public:
    Department(string n, string l, double b) : name(n), location(l), budget(b) {}

    void displayDepartment() const {
        cout << "Department: " << name << ", Location: " << location << ", Budget: $" << budget << endl;
    }
};

// ========================
// GradeBook Class
// ========================
class GradeBook {
    map<string, double> grades;

public:
    void addGrade(string id, double grade) {
        if (grade < 0 || grade > 100) throw invalid_argument("Invalid grade");
        grades[id] = grade;
    }

    void report() const {
        double total = 0, maxGrade = 0;
        for (auto& g : grades) {
            total += g.second;
            maxGrade = max(maxGrade, g.second);
            if (g.second < 50) cout << "Failing: " << g.first << " (" << g.second << ")\n";
        }
        cout << "Average: " << (grades.empty() ? 0 : total / grades.size()) << ", Highest: " << maxGrade << endl;
    }
};

// ========================
// EnrollmentManager Class
// ========================
class EnrollmentManager {
    map<string, vector<string>> enrollments;

public:
    void enroll(string course, string studentId) { enrollments[course].push_back(studentId); }

    int count(string course) const {
        auto it = enrollments.find(course);
        return it != enrollments.end() ? it->second.size() : 0;
    }
};

// ========================
// Polymorphism Test
// ========================
void showPerson(const Person* p) {
    p->displayDetails();
    cout << "Payment: $" << p->calculatePayment() << "\n\n";
}

// ========================
// Main Test Program
// ========================
int main() {
    try {
        Student s1("Alice", 20, "S001", "alice@mail.com", "2024-08-20", "CS", 3.9);
        Student s2("Bob", 21, "S002", "bob@mail.com", "2024-08-20", "Math", 3.4);
        Professor p1("Dr. Smith", 50, "P001", "smith@mail.com", "Physics", "Quantum", "2010-09-15");

        Course c1("CS101", "Intro CS", 4, "Basics of CS");
        Department d1("Science", "Block B", 1200000);

        // Display
        s1.displayDetails();
        p1.displayDetails();
        c1.displayCourse();
        d1.displayDepartment();

        // GradeBook
        GradeBook gb;
        gb.addGrade("S001", 85);
        gb.addGrade("S002", 45);
        gb.report();

        // Enrollment
        EnrollmentManager em;
        em.enroll("CS101", "S001");
        em.enroll("CS101", "S002");
        cout << "Enrolled in CS101: " << em.count("CS101") << "\n\n";

        // Polymorphism
        vector<Person*> people = { &s1, &s2, &p1 };
        for (auto p : people) showPerson(p);

    } catch (exception& e) {
        cerr << "Error: " << e.what() << endl;
    }
    return 0;
}


