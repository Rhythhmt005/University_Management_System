#include <iostream>
#include <vector>
#include <map>
#include <memory>
using namespace std;

// ========================
// Base Class: Person
// ========================
class Person {
protected:
    string name, id;
    int age;

public:
    Person(string n, int a, string i) : name(n), id(i), age(a) {}
    virtual ~Person() {}

    virtual void displayDetails() const {
        cout << "Name: " << name << ", Age: " << age << ", ID: " << id << endl;
    }

    virtual double calculatePayment() const { return 0.0; }
};

// ========================
// Student Hierarchy
// ========================
class Student : public Person {
protected:
    string program;
    double gpa;
    vector<string> courses;

public:
    Student(string n, int a, string i, string prog, double g)
        : Person(n, a, i), program(prog), gpa(g) {}

    void enrollCourse(string course) { courses.push_back(course); }

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Program: " << program << ", GPA: " << gpa << "\nCourses: ";
        for (auto& c : courses) cout << c << " ";
        cout << endl;
    }

    double calculatePayment() const override { return 5000.0; }
};

class UndergraduateStudent : public Student {
    string major, minor, graduationDate;

public:
    UndergraduateStudent(string n, int a, string i, string prog, double g, string maj, string min, string grad)
        : Student(n, a, i, prog, g), major(maj), minor(min), graduationDate(grad) {}

    void displayDetails() const override {
        Student::displayDetails();
        cout << "Major: " << major << ", Minor: " << minor << ", Graduation: " << graduationDate << endl;
    }
};

class GraduateStudent : public Student {
    string researchTopic, advisor, thesisTitle;

public:
    GraduateStudent(string n, int a, string i, string prog, double g, string topic, string adv, string thesis)
        : Student(n, a, i, prog, g), researchTopic(topic), advisor(adv), thesisTitle(thesis) {}

    void displayDetails() const override {
        Student::displayDetails();
        cout << "Research: " << researchTopic << ", Advisor: " << advisor << ", Thesis: " << thesisTitle << endl;
    }
};

// ========================
// Professor Hierarchy
// ========================
class Professor : public Person {
protected:
    string department;

public:
    Professor(string n, int a, string i, string dept) : Person(n, a, i), department(dept) {}

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Department: " << department << endl;
    }

    double calculatePayment() const override { return 70000.0; }
};

class AssistantProfessor : public Professor {
public:
    AssistantProfessor(string n, int a, string i, string dept) : Professor(n, a, i, dept) {}

    double calculatePayment() const override { return 60000.0; }

    void displayDetails() const override {
        Professor::displayDetails();
        cout << "Rank: Assistant Professor" << endl;
    }
};

class AssociateProfessor : public Professor {
public:
    AssociateProfessor(string n, int a, string i, string dept) : Professor(n, a, i, dept) {}

    double calculatePayment() const override { return 80000.0; }

    void displayDetails() const override {
        Professor::displayDetails();
        cout << "Rank: Associate Professor" << endl;
    }
};

class FullProfessor : public Professor {
public:
    FullProfessor(string n, int a, string i, string dept) : Professor(n, a, i, dept) {}

    double calculatePayment() const override { return 100000.0; }

    void displayDetails() const override {
        Professor::displayDetails();
        cout << "Rank: Full Professor" << endl;
    }
};

// ========================
// Department (Composition)
// ========================
class Department {
    string name;
    vector<shared_ptr<Professor>> professors;

public:
    Department(string n) : name(n) {}

    void addProfessor(shared_ptr<Professor> prof) { professors.push_back(prof); }

    void displayDepartment() const {
        cout << "\nDepartment: " << name << "\nProfessors:\n";
        for (auto& p : professors) p->displayDetails();
    }
};

// ========================
// Course (Aggregation)
// ========================
class Course {
    string code, title;
    shared_ptr<Professor> instructor;

public:
    Course(string c, string t, shared_ptr<Professor> prof) : code(c), title(t), instructor(prof) {}

    void displayCourse() const {
        cout << "\nCourse: " << title << " (" << code << ")\nInstructor: ";
        instructor->displayDetails();
    }
};

// ========================
// Classroom & Schedule
// ========================
class Classroom {
    string roomNumber;

public:
    Classroom() : roomNumber("Unknown") {} // âœ… Default constructor
    Classroom(string rn) : roomNumber(rn) {}

    void displayClassroom() const { cout << "Classroom: " << roomNumber << endl; }
};

class Schedule {
    map<string, shared_ptr<Classroom>> timetable;

public:
    void addSchedule(string courseCode, shared_ptr<Classroom> room) {
        timetable[courseCode] = room;
    }

    void displaySchedule() const {
        for (auto& entry : timetable) {
            cout << "Course: " << entry.first << " in ";
            entry.second->displayClassroom();
        }
    }
};

// ========================
// University Class
// ========================
class University {
    vector<Department> departments;

public:
    void addDepartment(const Department& dept) { departments.push_back(dept); }

    void displayUniversity() const {
        for (auto& dept : departments) dept.displayDepartment();
    }
};

// ========================
// Main Test Program
// ========================
int main() {
    try {
        // Professors
        auto prof1 = make_shared<AssistantProfessor>("Dr. Green", 40, "P001", "Engineering");
        auto prof2 = make_shared<FullProfessor>("Dr. Blue", 55, "P002", "Science");

        // Departments
        Department engineering("Engineering");
        engineering.addProfessor(prof1);
        Department science("Science");
        science.addProfessor(prof2);

        // University
        University uni;
        uni.addDepartment(engineering);
        uni.addDepartment(science);

        // Students
        UndergraduateStudent ugStudent("Alice", 20, "S001", "Engineering", 3.7, "Computer Eng", "Math", "2025");
        GraduateStudent gradStudent("Bob", 24, "S002", "Science", 3.9, "AI Research", "Dr. Blue", "AI in Robotics");

        // Course & Classroom
        Course cs101("CS101", "Intro to CS", prof1);
        auto room101 = make_shared<Classroom>("Room 101");

        // Schedule
        Schedule schedule;
        schedule.addSchedule("CS101", room101);

        // Display everything
        uni.displayUniversity();
        cs101.displayCourse();
        ugStudent.displayDetails();
        gradStudent.displayDetails();
        schedule.displaySchedule();

    } catch (exception& e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}
